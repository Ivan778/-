.model small
.stack 100h

.data

x dw 4									; размер матрицы по Х
y dw 2									; размер матрицы по Y

k dw 2									; т.к матрица состоит из слов, то индекс второго элемента будет двойкой => нужно умножать на 2 нормальный индекс

mtxI dw 0								; хранит индекс текущего элемента исходной матрицы
trMtxI dw 0								; хранит индекс места в новой транспонированной матрице, куда будем писать элемент

mtx dw 1, 2, 3, 4, 5, 6, 7, 8			; исходная матрица
trMtx dw 8 dup(?)						; здесь будет транспонированная матрица

.code



start:

    mov ax, @data
    mov ds, ax
    
    xor si, si							; бегунок по матрице
    sub si, 2							; уменьшаем на для подготовки к циклу
    
    xor bx, bx							; множащий коэффициент
    
loopI:    
    
    mov dx, x 							; 
    add dx, x 							; поместили в dx удвоенное значение ширины исходной матрицы
    
    sub dx, 2							; отняли 2 (нужно для сравнения)
    
    cmp si, dx 							; если мы дошли до конца матрицы
    je endLoop 							; заканчиваем цикл
    
    add si, 2							; в противном случае увеличиваем si на 2
    xor bx, bx 							; и чистим bx для нового прохода по матрице
      
loopJ:
    
    cmp bx, y 							; смотрим, не дошли ли мы до конца
    je loopI 							; если дошли, прыгаем на верхний цикл
    
    mov ax, x 							; поместили в ax х
    mul k 								; умножили его на 2
    
    mul bx 								; и на значение множителя в bx
    
    add ax, si							; добавили 2; таким образом мы посчитали индекс текущего элемента
    mov mtxI, si						; запомнили текущее значение si
    
    mov si, ax 							; поместили в si индекс элемента исходной матрицы
    mov ax, mtx[si] 					; извлекли элемент в ax
    
    mov si, trMtxI						; поместили в si индекс транспонированной матрицы
    mov trMtx[si], ax					; записали по этому индексу элемент из исходной матрицы
    
    add si, 2							; увеличили индекс элемента на 2
    mov trMtxI, si						; запомнили его
    
    mov si, mtxI 						; восстановили значение индекса для прохода по исходной матрице
    
    inc bx 								; увеличили коэффициент на 1
    
    jmp loopJ          					; прыгнули в начало цикла

endLoop:

    
    
    mov ax, 4C00h
    int 21h

end start